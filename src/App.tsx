import React, { useEffect, useState } from 'react';
import './styles/styles.css'; // –ï—Å–ª–∏ App.tsx –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ /src, —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
import { getEntries, createEntry, DiaryEntryAPI } from './services/api';
import ExpandableText from './components/ExpandableText';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π –∑–∞–ø–∏—Å–∏
interface DiaryEntry {
    id: number;
    date: string;  // —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD
    title: string;
    text: string;
}

const App: React.FC = () => {
    const [isFormOpen, setIsFormOpen] = useState(false);
    const [entries, setEntries] = useState<DiaryEntry[]>([]);
    const [loading, setLoading] = useState(false);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å API –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è UI  
    const fetchEntries = async () => {
        setLoading(true);
        try {
            const apiEntries = await getEntries();
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–µ text, –≥–¥–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äì –∑–∞–≥–æ–ª–æ–≤–æ–∫,
            // –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äì —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏.
            const processed = apiEntries.map((apiEntry: DiaryEntryAPI) => {
                const lines = apiEntry.text.split('\n');
                const title = lines[0] || '';
                const text = lines.slice(1).join('\n');
                return {
                    id: apiEntry.id,
                    date: apiEntry.created_at.split('T')[0],
                    title,
                    text
                };
            });
            setEntries(processed);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π', error);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchEntries();
    }, []);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalEntries = entries.length;
    const totalWords = entries.reduce((sum, entry) => {
        const titleWords = entry.title.trim().split(/\s+/).filter(Boolean).length;
        const textWords = entry.text.trim().split(/\s+/).filter(Boolean).length;
        return sum + titleWords + textWords;
    }, 0);
    const daysWithEntries = new Set(entries.map(e => e.date)).size;

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ –¥–∞—Ç–µ
    const groupedEntries: Record<string, DiaryEntry[]> = entries.reduce((acc, entry) => {
        if (!acc[entry.date]) acc[entry.date] = [];
        acc[entry.date].push(entry);
        return acc;
    }, {} as Record<string, DiaryEntry[]>);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥—Ä—É–ø–ø—ã: –°–µ–≥–æ–¥–Ω—è, –í—á–µ—Ä–∞ –∏–ª–∏ –¥–∞—Ç–∞ (d.MM)
    const getGroupLabel = (dateStr: string) => {
        const date = new Date(dateStr);
        const today = new Date();
        const yesterday = new Date();
        yesterday.setDate(today.getDate() - 1);
        if (date.toDateString() === today.toDateString()) return "–°–µ–≥–æ–¥–Ω—è";
        if (date.toDateString() === yesterday.toDateString()) return "–í—á–µ—Ä–∞";
        return `${date.getDate()}.${date.getMonth() + 1}`;
    };

    const openForm = () => setIsFormOpen(true);
    const closeForm = () => setIsFormOpen(false);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏  
    const handleSubmitForm = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        const formData = new FormData(e.currentTarget);
        const title = formData.get('title') as string;
        const text = formData.get('text') as string;
        try {
            const newEntryAPI = await createEntry({ title, text });
            const lines = newEntryAPI.text.split('\n');
            const newEntry: DiaryEntry = {
                id: newEntryAPI.id,
                date: newEntryAPI.created_at.split('T')[0],
                title: lines[0] || '',
                text: lines.slice(1).join('\n')
            };
            setEntries(prev => [newEntry, ...prev]);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏', error);
        }
        setIsFormOpen(false);
    };

    return (
        <div className="app-container">
            {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å */}
            <header className="app-header">
                <div className="header-left">–î–Ω–µ–≤–Ω–∏–∫</div>
                <div className="header-right">
                    <button className="icon-button" onClick={() => alert("–ü–æ–∏—Å–∫")}>üîç</button>
                    <button className="icon-button" onClick={() => alert("–û–ø—Ü–∏–∏")}>‚ãÆ</button>
                </div>
            </header>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="stats-container">
                <div className="stat">
                    <div className="stat-number">{totalEntries}</div>
                    <div className="stat-label">–ó–∞–ø–∏—Å–µ–π</div>
                </div>
                <div className="stat">
                    <div className="stat-number">{totalWords}</div>
                    <div className="stat-label">–°–ª–æ–≤</div>
                </div>
                <div className="stat">
                    <div className="stat-number">{daysWithEntries}</div>
                    <div className="stat-label">–î–Ω–µ–π</div>
                </div>
            </div>

            {/* –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ */}
            <div className="entries-container">
                {loading ? (
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                ) : (
                    Object.keys(groupedEntries)
                        .sort((a, b) => (a < b ? 1 : -1))
                        .map((groupDate: string) => (
                            <div key={groupDate} className="entry-group">
                                <h3 className="group-label">{getGroupLabel(groupDate)}</h3>
                                {groupedEntries[groupDate].map((entry: DiaryEntry) => (
                                    <div key={entry.id} className="entry-card">
                                        <div className="entry-card-title">{entry.title}</div>
                                        <ExpandableText text={entry.text} />
                                    </div>
                                ))}
                            </div>
                        ))
                )}
            </div>

            {/* –ü–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ "+" */}
            <button className="fab" onClick={openForm}>+</button>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ */}
            {isFormOpen && (
                <div className="modal-overlay">
                    <div className="modal-content">
                        <div className="modal-header">
                            <div className="modal-date">
                                {new Date().toLocaleDateString('ru-RU', { weekday: 'long', day: 'numeric', month: 'short' })}
                            </div>
                            <button className="done-button" onClick={closeForm}>–ì–æ—Ç–æ–≤–æ</button>
                        </div>
                        <form onSubmit={handleSubmitForm} className="entry-form">
                            <input type="text" name="title" placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫" className="entry-title-input" required />
                            <textarea name="text" placeholder="–¢–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏" className="entry-textarea-input" required></textarea>
                            <button type="submit" className="submit-form-button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        </form>
                    </div>
                </div>
            )}
        </div>
    );
};

export default App;